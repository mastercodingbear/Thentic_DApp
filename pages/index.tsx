import type { NextPage } from 'next';
import Head from 'next/head';
import Web3Modal, { IProviderOptions } from 'web3modal';
import { providers } from 'ethers';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import WalletConnectProvider from '@walletconnect/web3-provider';
import axios from 'axios';

interface NFTContract {
  chain_id: string;
  contract: string;
  name: string;
  request_id: string;
  short_name: string;
  status: string;
  transaction_pixel: string;
  transaction_url: string;
}

interface Props {
  contracts: NFTContract[];
}

const providerOptions: IProviderOptions = {
  walletconnect: {
    package: WalletConnectProvider,
    options: {
      infuraId: process.env.NEXT_PUBLIC_INFURA_ID,
    },
  },
};

let web3Modal: Web3Modal;
if (typeof window !== 'undefined') {
  web3Modal = new Web3Modal({
    cacheProvider: true,
    providerOptions: providerOptions,
  });
}

const Home: NextPage<Props> = ({ contracts }) => {
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [NFTContractAddress, setNFTContractAddress] = useState<string>('');
  const [NFT_Id, setNFTId] = useState<string>('');
  const [NFT_Data, setNFTData] = useState<string>('');

  useEffect(() => {
    if (contracts.length > 0 && contracts[0].status !== 'pending') {
      setNFTContractAddress(contracts[0].contract);
    }
  }, []);

  const connectWallet = async () => {
    try {
      const provider = await web3Modal.connect();
      const web3Provider = new providers.Web3Provider(provider);
      const signer = web3Provider.getSigner(0);
      const walletAddress = await signer.getAddress();

      setWalletAddress(walletAddress);
    } catch (err: any) {
      console.error(err);
      alert(err?.message);
    }
  };

  const createNFTContract = async () => {
    try {
      const response = await axios.post('/api/newNFTContract');
      if (walletAddress) {
        location.replace(response.data.transaction_url);
      } else {
        alert('Connect your wallet!');
      }
    } catch (err: any) {
      alert(err?.message);
    }
  };

  const mintNFT = async () => {
    try {
      if (walletAddress) {
        const response = await axios.post('/api/mintNFT', null, {
          params: {
            contract: NFTContractAddress,
            nft_id: NFT_Id,
            nft_data: NFT_Data,
            to: walletAddress,
          },
        });
        location.replace(response.data.transaction_url);
      } else {
        alert('Connect your wallet!');
      }
    } catch (err: any) {
      alert(err?.message);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <nav className={styles.navbar}>
          <button
            onClick={() => connectWallet()}
            className={styles.walletConnect}
          >
            {walletAddress
              ? walletAddress.substring(0, 10) + '...'
              : 'Connect Wallet'}
          </button>
        </nav>

        <h1 className={styles.title}>
          Welcome to <a href="https://thentic.tech">Thentic!</a>
        </h1>

        <div className={styles.nftContainer}>
          <div className={styles.nftOption}>
            {!NFTContractAddress ? (
              <button
                onClick={() => createNFTContract()}
                className={styles.btn}
              >
                New NFT Contract
              </button>
            ) : (
              <button onClick={() => mintNFT()} className={styles.btn}>
                Mint NFT
              </button>
            )}
          </div>
          {NFTContractAddress && (
            <div className={styles.mintParams}>
              <input
                value={NFT_Id}
                type="number"
                placeholder="NFT Id"
                onChange={(e) => setNFTId(e.target.value)}
                className={styles.input}
              />
              <input
                value={NFT_Data}
                placeholder="NFT Data"
                onChange={(e) => setNFTData(e.target.value)}
                className={styles.input}
              />
            </div>
          )}
        </div>
      </main>

      <footer className={styles.footer}>
        Powered by <span className={styles.author}>Adam</span>
      </footer>
    </div>
  );
};

export async function getServerSideProps() {
  let contracts;
  await axios
    .get('https://thentic.tech/api/contracts', {
      headers: {
        'Content-Type': 'application/json',
      },
      data: {
        key: process.env.NEXT_PUBLIC_THENTIC_KEY,
        chain_id: 97,
      },
    })
    .then((res) => {
      contracts = res.data;
    });

  return {
    props: contracts,
  };
}

export default Home;
